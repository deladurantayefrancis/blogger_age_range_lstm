#!/bin/bash

# allows usage of '!' in perl regex search (for negative lookbehind and lookahead)
set +H

dataset=$1
lines=$2

months="(january|february|march(?![a-z])|april|june|july|august|september|october|november|december)"

##########################
# START OF PREPROCESSING #
##########################

cat ./data/data_${dataset}.txt |\
    head -n ${lines} |\
    
    # parenthesis, brackets and braces pairs (to avoid capturing when looking for smileys)
    perl -pe "s/\(([^\(\)]+)\)/ \( \1 \) /g" |\
    perl -pe "s/\(([^\(\)]+)\)/ \( \1 \) /g" |\
    perl -pe "s/\[([^\[\]]+)\]/ \[ \1 \] /g" |\
    perl -pe "s/\[([^\[\]]+)\]/ \[ \1 \] /g" |\
    perl -pe "s/\{([^\{\}]+)\}/ \{ \1 \} /g" |\
    perl -pe "s/\{([^\{\}]+)\}/ \{ \1 \} /g" |\

    # replace quotes
    perl -pe "s/\"+([^\"]+)\"+/ QUOTES \1 QUOTES /g" |\

    # replace email adresses
    perl -pe "s/[a-z0-9\.\'_-]+@[a-z0-9\._-]+\.[a-z]{2,4}/ EMAIL /g" |\

    # replace urls and images
    perl -pe "s/www\.[a-z0-9\.\_\-]+/ urllink /g" |\
    perl -pe "s/[a-z0-9\.\_\-]+\.(com|org)/ urllink /g" |\
    perl -pe "s/[a-z0-9\.\_\-]+\.jpe?g/ IMAGE /g" |\

    # set maximum of three repetitions for every unique character
    perl -pe "s/([^0-9])\1{3,}/\1\1\1/g" |\

    # related to dots tokens
    perl -pe "s/\.{2,}/ DOTS /g" |\
    perl -pe "s/(\!+\?+|\?+\!+)(\!|\?)*/ QUESTIONEXCLAM /g" |\
    perl -pe "s/\?{2,}/ STRONGQUESTION /g" |\
    perl -pe "s/\!{2,}/ STRONGEXCLAM /g" |\

    # repeated sequences of alternating chars
    perl -pe "s/([^\s]{2,})\1{2,}/\1\1/g" |\
    perl -pe "s/([a-z0-9])\1*(?!\1)([a-z0-9])\2*(\1+\2+){2,}(\1|\2)*/\1\2\1\2/g" |\

    # related to time tokens
    perl -pe "s/(0?[0-9]|1[0-9]|2[0-3])([:h][0-6][0-9]| ?[ap]\.?m(?![a-z])){1,3}/ TIME /g" |\
    perl -pe "s/(monday|tuesday|wednesday|thursday|friday|saturday|sunday)/DAY/g" |\
    perl -pe "s/${months}/MONTH/g" |\
    perl -pe "s/(?<![a-z])(jan|feb|mar|apr|jun|jul|aug|sep[t]?|oct|nov|dec)(?![a-z])/MONTH/g" |\
    perl -pe "s/(MONTH|may)(([, ]|, )((of )?[0-9]{3,4}|[0-9]{1,2}(r?st|nd|rd|th)?)){1,2}/DATE/g" |\
    perl -pe "s/DAY, (MONTH|may) [0-9]{1,2}/DATE/g" |\
    perl -pe "s/(?:m?[wu]{0,2}a?h([aeiou])h+\1+(h|\1)*[sxz]*)+/ LAUGHS /g" |\


    # common abbreviations
    perl -pe "s/[^a-z]a\.j\.?/ AJ /gi" |\
    perl -pe "s/[^a-z]a\.k\.a\.?/ AKA /gi" |\
    perl -pe "s/[^a-z]b\.c\.?/ BC /gi" |\
    perl -pe "s/[^a-z]b\.net/ BNET /gi" |\
    perl -pe "s/[^a-z]b\.s\.?/ BS /gi" |\
    perl -pe "s/[^a-z]cnn\.com/ CNN /gi" |\
    perl -pe "s/[^a-z]d\.va\.?/ DIVA /gi" |\
    perl -pe "s/[^a-z]d\.c\.?/ DC /gi" |\
    perl -pe "s/[^a-z]e\.g[\.,\-:\s]*/ EG , /gi" |\
    perl -pe "s/[^a-z]e\.p\.?/ EP /gi" |\
    perl -pe "s/[^a-z]e\.u\.?/ EU /gi" |\
    perl -pe "s/[^a-z]f\.y\.i\.?/ FYI /gi" |\
    perl -pe "s/[^a-z]i\.e[\.,\-:\s]*/ IE , /gi" |\
    perl -pe "s/[^a-z]i\.q\.?/ IQ /gi" |\
    perl -pe "s/[^a-z]j\.p\.?/ JP /gi" |\
    perl -pe "s/[^a-z]l\.a\.?/ LA /gi" |\
    perl -pe "s/[^a-z]m\.i\.a\.?/ MIA /gi" |\
    perl -pe "s/[^a-z]n\.f\.l\.?/ NFL /gi" |\
    perl -pe "s/[^a-z]o\.g\.?/ OG /gi" |\
    perl -pe "s/[^a-z]o\.k\.?/ OK /gi" |\
    perl -pe "s/[^a-z]p\.e\.?/ PE /gi" |\
    perl -pe "s/[^a-z]ph\.d\.?/ PHD /gi" |\
    perl -pe "s/[^a-z]p\.s[\.,\-:\s]*/ PS : /gi" |\
    perl -pe "s/[^a-z]s\.w\.a\.t\.?/ SWAT /gi" |\
    perl -pe "s/[^a-z]t\.v\.?/ TV /gi" |\
    perl -pe "s/[^a-z](u\.)?g\.a\.?/ UGA /gi" |\
    perl -pe "s/[^a-z]u\.k\.?/ UK /gi" |\
    perl -pe "s/[^a-z]u\.n\.?/ UN /gi" |\
    perl -pe "s/[^a-z]u\.s\.a\.?/ USA /gi" |\
    perl -pe "s/[^a-z]u\.s\.?/ US /gi" |\
    perl -pe "s/[^a-z]w\.r\.t\.?/ WRT /gi" |\
    perl -pe "s/[^a-z]w\.t\.f\.?/ WTF /gi" |\

    # common mispellings
    perl -pe "s/w(o*0+)t/ WOOT /g" |\
    perl -pe "s/1ce/ ONCE /g" |\
    perl -pe "s/2dae/ TODAY /g" |\
    perl -pe "s/sk8ter/ SKATER /g" |\
    perl -pe "s/l8r/ LATER /g" |\
    perl -pe "s/\bb(c[ou]z)/ BECAUSE /g" |\
    perl -pe "s/\bb(cause)/ BECAUSE /g" |\
    perl -pe "s/\b'?(c[ou]z)/ CAUSE /g" |\
    perl -pe "s/\b'?(cause)/ CAUSE /g" |\
    perl -pe "s/\b2(day|gether|morrow|moro|night|nite)/ TO\U\1\E /g" |\
    perl -pe "s/\b4(bid|ever|get|got|ward)/ FOR\U\1\E /g" |\

    # masked fucks
    perl -pe "s/f[\*u][\*c][\*k]/fuck/g" |\
    perl -pe "s/f[[:punct:]]{3}/fuck/g" |\

    # other common abbreviations
    perl -pe "s/\sb\/c\s/ BECAUSE /g" |\
    perl -pe "s/\sj\/k\s/ JOKE /g" |\
    perl -pe "s/\sw\/o(ut)?\s/ WITHOUT /g" |\
    perl -pe "s/\sw\/\s/ WITH /g" |\
    perl -pe "s/\sw\/e\s/ WHATEVER /g" |\

    # words elongated with spaces or punctuations
    perl -pe "s/[a-z]((?![\-])\p{P})([a-z]\1)+[a-z]\1?/ PUNCTSEPARATED /g" |\
    perl -pe "s/[a-z](\s[a-z]){3,}/ SPACESEPARATED /g" |\

    # remplace numbers
    perl -pe "s/\b[\+\-]?[0-9]+([\.,][0-9]+)*(\/[0-9]+([\.,][0-9]+)*)?/ NUMBER /g" |\

    # remplace smileys
    perl -pe "s/[:;][\-\^\'o]?([^[:space:]\'\"\>\-_\.:;0-9a-z]|[opds])(?![a-z0-9])/ SMILEY\1 /g" |\
    perl -pe "s/([[:punct:]])[\.\_\-]\1/ EYE\1 /g" |\
    perl -pe "s/\^[[:punct:]]?\^/ HAPPY /g" |\
    perl -pe "s/\~_\^/ EYEBROW /g" |\

    # repeated punctuations
    perl -pe "s/([\-\*\_\~\=\,\;\']){2,}/ \1 /g" |\

    # arrows made of punctuations
    perl -pe "s/[\-\~]+>|>{2,}/ ARROW /g" |\

    # adds spaces around punctuations
    perl -pe "s/(?!SMILEY)([[:punct:]])/ \1 /g" |\

    # removes extra spaces
    perl -pe "s/ +/ /g" |\
    perl -pe "s/^ //g" |\


    # output result to file
    cat > ./out/data_${dataset}.out
